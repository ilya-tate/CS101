Intro to CSS:
- When a websitre loads it does things in a specific order.
- Parses HTML first.
- Them creates a DOM.
- Then applies the CSS to the finished DOM.


The DOM:
- The Document Object Model is kind of like a tree with branches
Ex.
<p>
    Let's use:
    <span>Cascading</span>
    <span>Style</span>
    <span>Sheets</span>
</p>


Applying CSS to the DOM:
- When creating the CSS selector it will look through the tree.
- Then find the part of the tree that matches the selector, changing the style for that part
Ex.
span {
    border: 1px solid black;
    backround-color: lime;
}


- Will not just break when you mess up, it'll move on.
- It will skip the wrong commands and since it does not match a branch on your DOM.
- CSS only modifies existing code.


Ways to Add CSS:
External - Making the CSS file.
Internal - Using the <style> element in HTML.
Inline - Using the style attribute.


Specificity:
.special - Recificity refers to how specific you want your selector.
- More specific is taken.


Order:
- Two selectors with the same specificity, the 2nd one is used.
- Newest one always overrides.



CSS Rulesets:
- The thinfs that you put inside the selector curly brackets are called properties and values.
- Put these all together and you get a rulest.



Definitions:
CSS Selector - Chooses DOM element.
CSS Property - Changes a part of it.
CSS Value - States hwo the property should change.
CSS Declaration - When a property is paired with a value.
CSS Declaration Block - When several properties are paired with several values.



Functions:
- CSS usually just works in somple values and units, but there is a way to do functions using calc
Ex.
width: calc(90% - 60px);


transform: translate(1px, -2px); - Right 1 pixel, Down 2 pixels
transform: rotate(90deg); - Rotates 90 degrees
transform: scale(2); - 2 times as big
transform: skew(20deg, 40deg); - Skews it in those directions
transform: matrix(1, 2, 3);
Ex. transform: scale(2) rotate(90deg);


@rules:
- 2 @rules that you will need to know
@import - Not used very much but loads a different CSS sheet into yours, great way to load a preset style into your HTML.
@media - Shows which styles should be shown when a certain value is met.



Shorthand Properties:
- There are some properties that can cover multiple properties in one.
Ex.
padding 10px 15px 20px 25px - top, right, bottom, left



Comments:
- Different in every language.
- Ctrl + / makes a comment
<!-- --> - HTML
/**/ - CSS
// - JS
- Use comments as needed
- They will be needed



White Space:
- You can use all the white space you want around the properties.
- Insisde the properties and rulesets of CSS, be careful.
- White space makes a difference in CSS unlike JS and other languages.



Selectors:
- The words at the start of CSS are called selectors. They tell the DOM where the different styles will be applied.
- Normally your selectors can simply be the element that you want to change.
Ex.
p{}, h1{}, a{}



Classes and IDs:
- You will want to choose speific elements from time to time.
- To do this use IDs which are defined in HTML and used in CSS.

- Class is a property in HTML which can mark consistent theme in your HTML.
- A class should be used if you need to change more than one time or isn't specific, it should be a class.
- You can edit a class in CSS using a ".".

- IDs are like classes in that they modify an element making it easier to call out in CSS.
- IDs should be used in a very specific change, should be unique or it should be a class.
- Call IDs by using "#" in the CSS
]



Universal Selector:
- If you want to select everythin on the page you use "*".
- If you want to remove the margins and padding from everything to remove the margins and padding from everything then use:
* {
    margin: 0; padding: 0;
}
- This had very low specificity and will be overwritten by everything.



Attribute Selectors:
- You can use selectors tha will affect an element based on what attribute it has or if the atribute has a specific vlaue for that attribute.
Ex.
a {color: blue;}
a[href] {color: purple;}
a[href="west-mec.org] {color: orange;}



Pseudo-Classes and Pseudo-Elements:
- Some elements hav properties tha we can't see or they have events that can also affect the style.
Ex.
a:hover {
    color: red;
}

- For instance if you hover over a link you can change th style or if the link has been visited before.
Ex.
a:visited {
    color: blue;
}

- Pseudo elements can interact with th elements in an HTML, for instance if you want to change the first eltter of every paragraph tag you can do that.
Ex.
p::first-letter {
    font-size: larger;
    font-family: fantasy;
}



Combinators:
- If you wnat to effect any paragrpag in the article elements you use a space.
Ex.
article p {
    color: blue;
}
- If you wnat to only effect paragraphs that are DIRECT children of the article you use ">".
Ex.
article > p {
    color: blue;
}



Box:
- Has 4 parts: content, padding, border, margin
- Can see these parts in the dev tools.



Block and Inline Boxes:
- Defining a box as a block if will have the following properties:
    - The box will <br> into a new line.0
    - Boxes will extend its width and height to fill the container.
    - Width and height properties are respected.
    - Padding, margins, and borders will cause other elements to be pushed away from the box.

- When a box is defined as inline then it will have the following properties:
    - The box will not break onto a new line.
    - The width and height properties will not apply.
    - Vertical padding, margins, and borders will apply but not cause other inline .boxes to move away from the box.
    - Horizontal ones will apply and will cuase other inline boxes to move away from the box.


display: inline - Does not break the container.
display: block - Is default and breaks most container elements.
display: grid - Grid works like a grid, it creates a grid pattern on the page anc you can fill in the cells. Block style be default with more format options.
display: flex - Flexbos is one of the newest display types that is becoming the standard. Works like block but with different formatting options.



Display Grid Parent Properties:
display: grid; - Gives you a block-level grid.
display: inline-grid; - Gives you an inline-level grid.
- Typically you want to stick with block-level grid.


Grid Templates:
grid-template-columns - Defines the columns of the grid with space-separated values.
grid-template-rows - Defines the rows of the grid with space-sparated values.
- The values represent each cell's width and the spaces can be thought of as the dividing grid lines.

You cant name them by adding [name].
Ex.
grid-template-columns: [first] 40px [line2] 50px auto [col4-start col3-end] 50px [five 40px [end];
- When you don't name them they are just given numbered names.

repeat() function - There is a shortcut id you want to create several columns or rows.
Ex.
container {
    grid-template-columns: repeat(3, 20px [col-start]);
}

#% - Percent. Fills a given percentage of the container.
#px - Pixels. Creates a fixed box of a given size.
auto - Auto. Fills the remaining space of the container.
#fr - Fractions. Fills the content based on a fraction of total fractions's declared.

Fractions - Free space to be divided up by the fractions will be calculated AFTER the non-flexible items.


Grid Areas:
Step 1 -
    You can create grid-areas with name and defined grid cells.
    First name you areas using classes or elements.
    Ex.
    .item-1 {
        grid-area: header;
    }

Grid Template Areas -
    You can divide out the cells of the grid to make areas.
    "name" - Represents a grid item.
    . - Represents an empty cell.
    None - Represents no grid area definition.
    Ex.
    grid-template-areas: " | . | none | ...";

Step 2 -
    Once you have you item you can then use it to create the grid layout.
    Everytime you sau the name, a new cell is reseverd for that grid area.
    Ex.
    grid-template-areas: "header header header";

Grid Gap -
    This only creates spaces between the areas in the grid, it will not have a gap netween the areas and the container.
    If you only say 1 it will change both.
    Ex.
    gap: [row gap] [col gap];
    gap: 10px 20px;
    gap 10px;



Justify-Items:
- There are 4 values for this.
start - Aligns items to be flush with the starting edge of their cell.
end - Aligns items to be flush with the end edge of their cell.
center - Aligns items to be flush with the center of their cell.
stretch - Fills the whole width of the cell.


Align-Tems:
- Justify is left and right, align is up and down.
- It has the same 4 values as justify and they're basically the same but top and bottom.


Justify-Content:
- Justify Content also works similarly, but affects the container instead of the grid cells it has 3 new values.
    space-around - Splits the remaining space evenly around the grid items.
    space-between - Splits the space remaining evenly between the grid items.
    space-evenly - All space around the items wil be the same.

    justify-content: start
    justify-content: stretch
    justify-content: space-between
    justify-content: space-evenly


Align-Content:
- Sometimes therr is extra space around the grid in the container which can happen when you use non-flexible units like px.
- This will reposition the entire grid inside of the grid baserd on the value. Theya re all the same values as justify-content.

start
endcenter
stretch
space-around
space-between



Grid Column/Rows:
- You can position your items based on the grid rows without using grid-template-areas.
- If you just use grid-column: and grid-row: stating the starting and eending lines.
Ex.
grid-column: 2 / 3;
grid-row: start / end;


grid-auto-columns/rows:
- If items are places outside of the grid some messy stuff can happen.
- We can adjust for this by creating auto columns/rows.
- This will tell your code hwo to fill in the extra space that you didn't plan for.

grid-auto - Same thiing this time using
Ex.
grid-auto-column: 60px;


Wrapping it all together:
you can use the shorthadn "grid:"
grid-template-rows
grid-template-columns
grid-template-areas
grid-auto-rows
grid-auto-columns
grid-auto-flow



Flexbox:

Container Properties:
- The following will be properties that you can apply to the container of the flexbox.
- We call the container the Flex Container.
https://gyazo.com/d0843639d11142880af0fcfa698b8ca2


display: flex; - Just like with display: gid if you wnat to use the properties associated with a certain type of display, you need to the declare the display type first.
- There is only display: inline-flex; but we don't use that one.


Grid vs. Flexbox:
- Grid focuses on the vells and laying out the grid before.
- Flecbox instead focuses on the items in the container, they aren't cells like in grid.
- Items in the container and treated similarly to the cells but they have a lot more flexibility and are not locked into the grid cells.


flex-direction; - The first thing you need to decide with felx is which direction the overflowing will happen.
https://gyazo.com/18dd9c9228dd1b2e915010c8c220a4ba
https://gyazo.com/cb505fec4ee5810c85e592da31095cd6
row (default)
row-reverse
column
column-reverse


flex-wrap; - By default items will try to fit all on one line but you can change that as needed.
https://gyazo.com/e3918afa790676c4d1e3f5fdde69135b
nowrap (default)
wrap
wrap-reverse


jusify-content; - It is important to say which way the flex items should be sligned within the container along the main axis (horizontal for flex-direction: row or vertical for column)
https://gyazo.com/ed33e4c30d7537dd8d287bcaa9642246


align-items; - This works simililarly t othe box model and positions the items vertically in the container.
- There is a new value called baseline, this will move every item so that the text in the items are aligned.
https://gyazo.com/d892ed62042adfc7cd5b0bb5d4f6b8d8


align-content; - This algins the flex container's lines between the items.
- This property doesn't do anything if there are not multiple line of items in the container.
https://gyazo.com/7e7786577809d36b6a9294022bcc6085


Item Properties:
- These are the properties that you add to the flex items.
- These should be place directly on the items that you want to affect.

Order:
- The order properties will allow you to change the placement of your items inside of your container.
- This is if you wnat ot reorder your items when the screen reaches a certain size.
https://gyazo.com/0b68da05bdbbf3de2db0c880c8c943f4


flex-basis; - This defines the default size of an elemeq before hte remaining psace is distributed.
- It can be any length (20%, 5rem, etc.).
- The auto keyword mean that the item will fill in the remaining space if possible.
- If set to 0 the space around the content is not factoed in. If set to auto, the extra spcae is distributed based on it's flex-grow value.
https://gyazo.com/82a181a695e5b7fb94419f0f0fffd05f


flex-grow; - This defines the ability  for a flex item to grow if necesssary.
- If all items are set to 1 then they will try to divide the remaining space.
- If on of the them is set to 2 then that item wil ltake up twice as much of the remaining space if possible.
https://gyazo.com/964e0dca3af5dc9a7ae0657d8ffc09cb


flex-shrink; - This defines the ability for a flex item to shrink necessary.
- Negative values are invalid.
https://gyazo.com/b99373a76962bdca839c5d75ea934e5b


align-self; - This allows the default alignment (specified by align-items) to be overwridden for individual flex-items
- These have the same 6 keywords as the align-items property.
https://gyazo.com/528622b99c48817af7f7e869fa4bd3ae



Floats:
- Allos web devs to implement simple layouts involving and image floating inside a column of text.
- Floats have been used to vreate entire website layouts featuring multiple columns of information floated so they sit alongside one another.

float; - The float property is the way that you can move your items around the page and have the rest of the content move around them.
none - default, element does not float
left - element floats to the left of its container
right - element floats to the right of its container
Ex.
.float {
    float: right;
}


Clearing Floats:
- When you use floats the element will move othe elements out of the way and they will wrap around the floated object.
- If you want to stop the next element from moving up and filling in the space you use the clear property.
- you can clear space around the float items to get rif of content that you don't want near it.

clear: left; - Clears items floated to the left.
clear: right; - Clears items floated to the right.
clear: both; - Clears items floated to the, left or right.


Container Collapse:
- Common issue with floats.
- Since the square had float: left; it is taken out of the .wrapper container which causes the blue square to "collapse".
https://gyazo.com/014fb3738fb206edc9fdb012bd6c0f1d


Clearfix Hack:
- Common way to fix container collapse.
- Type the following into any container that had collapsed and it will be fixed:
.container::after {
    content: "";
    clear: both;
    display: table;
}
- Also works with display: block;


Overflow Property:
- You may also instead add the overflow: auto; property to the container and solve it that way, but people won't be as impressed if you fo it this way:
.container {
    background-color: rg(79, 185, 227);
    padding: 10px;
    color: #fff;
    overflow: auto;
}



Poisitioning:
- Allows you to place elements and objects awher you wnat and override the setting the default style sheet gives.
- Just use the position property.


poisition: static; - The default setting and will place the element on order with the rest of the web page.
- No reason to use it since it won't move anything and can leave it blank when you want this positioning.


position: relative; - Allows you to move your element/object around the page relative to where it should be placed.
top - Pushes it on the top and move it down.
left - Pushses it on the left and move it right.
bottom - Pushes it on the bottom and move it up.
right - Pushes it on the right and move it left.


position: absolute; - This removed the element from the rest of the document and the flow of the elements.
- Instead of posiitions within the rest of the document and the flow it will instead be moved to the top left of the page no matter what is in the way.


z-index; - Layering your content in top of each other is not always easy wen you are dealing wwith posiition.
- To make sure the correct element is showing on top layer we can use z-index.
- The higher the number the better.


position: fixed; - Works similarlyto the absolute positioning, it will move the element to the top left of the page and remove it from the list ofelements in the document.
- The difference is that th efixed will move with the screen when you scroll.


position: sticky; - The value of sticky is amic between fixed and relative.
- It will be placed inline with the rest of the elements like relative positioning.
- The difference is when you scroll past it, the element will be "stuck" to the top of the screen and scroll fown with you.



SVG (Scalable Vector Graphics):
- These are used to create icons, backgrounds, images, and sometimes while logos.
- The benefit of SVG over PNG or JPEG is the fact that they use pixels and SVG uses math equations so you can zoom in and it won't look bad.
- They aren't hard to make and there are lots of free sites to make them.