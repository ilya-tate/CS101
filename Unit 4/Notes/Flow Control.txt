The Comparers:
== - Checks the 2 values after converting everything to strings
=== - CHecks the 2 values without converting
object.is() - Checks the 2 values without handling + or - or NaN

Comparisons:
- When comparing two things you always will get either true or false.
- You need to tell the computer what the 2 things are that need to be compared and then how to compare them.
Ex.
    alert(2 == 2); // true

Number Comparisons:
- You compare numbers just like math and it's either true or false.
Ex.
    alert(5 > 5); // false
    alert(4 <= 5); // true

String Comparisons:
- Are checked left or right and they are judged in alphabetical order.
- "A" is less than "B" since "B" is later in the alphabet
- "West" is less than "Went"
    "W" is equal
    "e" is equal
    "s" is less than "n"
- When comparing strings in the unicode is checked and seen to be greater or less not the actual letters.
- When creating the unicode dictionary uppercase were letters were added first.
- "a" is greater than "A"
.toLowerCase() - If you want to check closely you can use this


Conditional Branching

The "if" Statement:
- This "if" statement is used to check a conditional statement
- It will either be "true" and proceed to, or "false" and skips
- The conditional is placed in the parameteres of the if statement

The Many Forms of "if":
- The standard form of "if" is as follows:
    if (conditional == true) {
        console.log('it was true');
    }
- If you want to execute 1 thing you can write it in a single line:
    if(year == 200) console.log('uh-oh');
- The "if" statement will always try t odo a boolean conversion before checking
- For example, a string is always true unless it's empty. This is called being "falsy"
Ex.
    ""
    Undefined
    NaN
    Null
    0
- You can also place a value into the conditional ather than a companion and it will still work if the boolean conversion outputs a true.

The "else" Condition:
- You an defone something "else" to happen in case the value is false
- This will happen no matte what if the condiition is false so it doesn't require a condition. It shares the other of the "if" conditional.
Ex.
    if(check) {
        console.log(`It was true;`);
    } else {
        console.log(`It was false`);
    }

"else if" Condition:
- If you want have several cascading checks through if statements you can use "else if" and create a second condition to check before failing.

"?" Ternary Operator:
- If you want to create a small "if else" conditional then you can use the conditional operator "?" and the else with a ":"
Ex.
    let result = (condition) ? value1 : value2;
    let canDrink = (age >= 21) ? true : false;
- If you want to use multiple conditional operators as in "else if" then you can use multiple "?". BUT DON'T DO THIS
Ex.
    let letterGrade = (grade > 90) ? 'A' :
        (grade > 80) ? 'B' :
        (grade > 70) ? 'C' :
        (grade > 60) ? 'D' :
        'F';

Switch Conditions:
- Enter a parameter and then list cases for what to expect.
- The last statement should be "default" as a catch all in  case none of the cases are mat
- It runs through all values unless you use "break" and skips to the end
Ex.
    switch(param) {
        case "walk":
            // Your code here
            break;
        case "sleep":
            // Your code here
        case "dream":
            // Your code here
            break;
        default:
            // Your code here
    }

    switch(true) { // Will always run
        case (myVal >= 10):
            multiplier = 2;
            break;
        default:
            // Your code here
    }


Logical operators
- Ways of checking more than 1 thing (operand) at once.
- If these were not used you would have to create several "if" statements within each other and keep checking if they're true.
- Now you can check 2 or more conditions in the same parameter

OR "||" Operator:
- OR is the logical operator that will return true if 1 or more of the values are true.
- ORs will go trhough and check if anything is true, if something is then it will run.
Ex.
    alert(true || true); // true

AND "&&" Operator:
- Uses 2 ampersands (&&)
- Similar to OR operator, but requires all the be truthy to run
- Computer will run through every condition in the parameter and exit the conditional as soon as a falsy operand appears, if none appear then it will continue.
Ex.
    if(tvOn && radioOn && computerOn) {
        // See if all three are on
        alert('You are using too much power');
    }

NOT "!" Operator:
- Just "!" and can be put in front of an equal sign or an operand
- Takes the truthy or falsy value of the operand and return the opposite value.
Ex.
    if(gas != 0 && (!mapMissing || !noDirections)) {
        alert('The road trip is on!')
    }