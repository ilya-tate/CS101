The Comparers:
== - Checks the 2 values after converting everything to strings
=== - CHecks the 2 values without converting
object.is() - Checks the 2 values without handling + or - or NaN

Comparisons:
- When comparing two things you always will get either true or false.
- You need to tell the computer what the 2 things are that need to be compared and then how to compare them.
Ex.
    alert(2 == 2); // true

Number Comparisons:
- You compare numbers just like math and it's either true or false.
Ex.
    alert(5 > 5); // false
    alert(4 <= 5); // true

String Comparisons:
- Are checked left or right and they are judged in alphabetical order.
- "A" is less than "B" since "B" is later in the alphabet
- "West" is less than "Went"
    "W" is equal
    "e" is equal
    "s" is less than "n"
- When comparing strings in the unicode is checked and seen to be greater or less not the actual letters.
- When creating the unicode dictionary uppercase were letters were added first.
- "a" is greater than "A"
.toLowerCase() - If you want to check closely you can use this


CONDITIONAL BRANCHING

The "if" Statement:
- This "if" statement is used to check a conditional statement
- It will either be "true" and proceed to, or "false" and skips
- The conditional is placed in the parameteres of the if statement

The Many Forms of "if":
- The standard form of "if" is as follows:
    if (conditional == true) {
        console.log('it was true');
    }
- If you want to execute 1 thing you can write it in a single line:
    if(year == 200) console.log('uh-oh');
- The "if" statement will always try t odo a boolean conversion before checking
- For example, a string is always true unless it's empty. This is called being "falsy"
Ex.
    ""
    Undefined
    NaN
    Null
    0
- You can also place a value into the conditional ather than a companion and it will still work if the boolean conversion outputs a true.

The "else" Condition:
- You an defone something "else" to happen in case the value is false
- This will happen no matte what if the condiition is false so it doesn't require a condition. It shares the other of the "if" conditional.
Ex.
    if(check) {
        console.log(`It was true;`);
    } else {
        console.log(`It was false`);
    }

"else if" Condition:
- If you want have several cascading checks through if statements you can use "else if" and create a second condition to check before failing.

"?" Ternary Operator:
- If you want to create a small "if else" conditional then you can use the conditional operator "?" and the else with a ":"
Ex.
    let result = (condition) ? value1 : value2;
    let canDrink = (age >= 21) ? true : false;
- If you want to use multiple conditional operators as in "else if" then you can use multiple "?". BUT DON'T DO THIS
Ex.
    let letterGrade = (grade > 90) ? 'A' :
        (grade > 80) ? 'B' :
        (grade > 70) ? 'C' :
        (grade > 60) ? 'D' :
        'F';

Switch Conditions:
- Enter a parameter and then list cases for what to expect.
- The last statement should be "default" as a catch all in  case none of the cases are mat
- It runs through all values unless you use "break" and skips to the end
Ex.
    switch(param) {
        case "walk":
            // Your code here
            break;
        case "sleep":
            // Your code here
        case "dream":
            // Your code here
            break;
        default:
            // Your code here
    }

    switch(true) { // Will always run
        case (myVal >= 10):
            multiplier = 2;
            break;
        default:
            // Your code here
    }


Logical operators
- Ways of checking more than 1 thing (operand) at once.
- If these were not used you would have to create several "if" statements within each other and keep checking if they're true.
- Now you can check 2 or more conditions in the same parameter

OR "||" Operator:
- OR is the logical operator that will return true if 1 or more of the values are true.
- ORs will go trhough and check if anything is true, if something is then it will run.
Ex.
    alert(true || true); // true

AND "&&" Operator:
- Uses 2 ampersands (&&)
- Similar to OR operator, but requires all the be truthy to run
- Computer will run through every condition in the parameter and exit the conditional as soon as a falsy operand appears, if none appear then it will continue.
Ex.
    if(tvOn && radioOn && computerOn) {
        // See if all three are on
        alert('You are using too much power');
    }

NOT "!" Operator:
- Just "!" and can be put in front of an equal sign or an operand
- Takes the truthy or falsy value of the operand and return the opposite value.
Ex.
    if(gas != 0 && (!mapMissing || !noDirections)) {
        alert('The road trip is on!')
    }

"nullish" Coalescing Operator:
- Newest and doesn't work on browsers that aren't updated
- Checks to see if the value is null or undefined, if it is then you can define a default value.
- Called a "nullish" value
Ex.
    if(value !== null && value != undefined) {
        return value;
    } else {
        return "This is undefined";
    }

Chaining the Operators:
- You can check several things in a row and it will reurn the frist non nullish value.
- Too new to be tested in node
Ex.
    let a = null;
    let b = undefined;
    let c = '';
    let d = "This is the last thing";
    console.log(a ?? b ?? c ?? d); // ''

- You can use || but the difference is that any "falsy" value will be skipped and not just nullish.
- So it will skip '', 0s, and false
Ex.
    let a = null;
    let b = undefined;
    let c = '';
    let d = "This is the last thing";
    console.log(a ?? b ?? c ?? d); // "This is the last thing"


LOOPS
- Loops are made up of 3 parameters, separated by semicolons -
    Starting value for loop at
    Conditions to be met for the loop to end
    How should your value change by every time the loop ends

Order:
1. hecks the condition, if true continue, if false exit
2. Run the code in the body
3. Increase by the increment (called stop) and repeat

Basic "for" Loop:
- Normally start will 1 as starting value
- Initial value needs to be stored in a variable since it will be changing throughout duration of code.
- To d othis we create a new variable, usually i (for increment) and set it equal to 1
Ex.
for(let i = 1);
- You then need to place in a condition, varies depending on what you want but now can create on that will happen 2 times.
- As long as i is less than 3 this example will run the loop
Ex.
for(let i = 1; i < 3);
- Will go up a set amount of time
- Most common way is to go up 1 at a time and the best way to do that is with the incremental operator, i++
- Lastly, add some code to run in the body that will happen for each loop execution
- Usually it will involve the i value since it will be changing so use it as an example.
Ex.
for(let i = 1; i < 3; i++) {
    console.log(`This has happened ${i} times`);
}
- If the starting value is initialized before, you do not have to declare is in the for loop
- Isn't normal and can lead to confusion if your variables are not correctly named.
Ex.
    let i = 0; // Already have i declared and assigned
    for(; i < 3; i++) { // No need for "begin"
        console.log(i); // 0, 1, 2
    }
- You can also skip the step portion if you are stepping it inside the loop
- Not recommended to do either as it can be confusing,, but sometimes you eed to step by different values depending on an if statement.
Ex.
- Definitely don't do this
- Has no beginning, exit, or end and will repeat forever
Ex.
for (;;) {
    // Repeats without limits
}

"while" Loops:
- While loops will keep running until the condition returns falsy.
- Similar to for loop but the difference comes in the parameters.
- ONLY declare the condiiton, not the start or step
- Eve n though you don't declare the inital and the step you normally use them anyway.
Ex.
    let i = 0;
    while(i < 3) { // Shows 0, then 1, then 2
        console.log(i);
        i++;
    }
- Since while loops end on falsy values you can end on a 0 without extra code
Ex.
let i = 0;
while(i) {
    alert(i);
    i--;
}
// When i become 0, the condition becomes falsy and stop the loop

"do while" Loop:
- Checks the condition to make sure it works and then move on to the body
- In while loops, there's a chance the condition fails immedietly and the loop never runs
- Do while loops were created to avoid this. Acts just as a while loop, but checks the condition at the end meaning it will always run at least once.
Ex.
let i = 0;
do {
    console.log(i);
    i++;
} while(i < 3);

"break" the Loop:
- You can stop the loop at any point by using the "break;" statement.

"continue":
- The continue statement is used to skip the rest of the code in the body, but not exit the loop instead of jumping to the next step.
Ex.
    for(let i = 0; i < 50; i++) {
        if(i % 5 == 0) continue;
        console.log(i);
    }

Labeling Loops:
- You are able to name loops by giving labels with "main:" as an example
- Importand when createing a complicatied system of nested loops
- Only affects loops in your nest, and cannot move a loop

"switch" Statements:
- Switch statement is used to replace multiple checks.
- Will run all subsequent cases if a break is not used.
Ex.
    swtich(x) {
        case 'value1':
        // if (x === 'value1')
        . . .
        break;
        case 'value2':
        // if (x === 'value2')
        . . .
        break;
        default:
    }